
AVRASM ver. 2.1.30  C:\Users\solta\Desktop\A\Debug\List\1.asm Tue Jan 28 21:20:25 2025

C:\Users\solta\Desktop\A\Debug\List\1.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\solta\Desktop\A\Debug\List\1.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _x=R4
                 	.DEF _x_msb=R5
                 	.DEF _y=R6
                 	.DEF _y_msb=R7
                 	.DEF _d=R8
                 	.DEF _d_msb=R9
                 	.DEF _p=R10
                 	.DEF _p_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 003f
000034 0006
000035 005b
000036 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
000037 0066
000038 006d
000039 007d
00003a 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
00003b 007f
C:\Users\solta\Desktop\A\Debug\List\1.asm(1137): warning: .cseg .db misalignment - padding zero byte
00003c 006f      	.DB  0x7F,0x0,0x6F
                 _0x0:
00003d 6e45
00003e 6574
00003f 2072
000040 2032      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x32,0x20
000041 6944
000042 6967
000043 2074
000044 203a      	.DB  0x44,0x69,0x67,0x69,0x74,0x20,0x3A,0x20
000045 2500
000046 0064      	.DB  0x0,0x25,0x64,0x0
                 _0x2020003:
000047 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000048 0013      	.DW  0x13
000049 0271      	.DW  _seg_code
00004a 0066      	.DW  _0x3*2
                 
00004b 0011      	.DW  0x11
00004c 0260      	.DW  _0x34
00004d 007a      	.DW  _0x0*2
                 
00004e 0002      	.DW  0x02
00004f 0295      	.DW  __base_y_G101
000050 008e      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 00e2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;//-----------------------------------------------------------------------
                 ;int seg_code[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;int x,y,d,p;
                 ;char str[16];
                 ;//-----------------------------------------------------------------------
                 ;int key_pad(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _key_pad:
                 ; .FSTART _key_pad
                 ; 0000 000C   PORTB.4=0;
00007f 98c4      	CBI  0x18,4
                 ; 0000 000D   PORTB.5=1;
000080 9ac5      	SBI  0x18,5
                 ; 0000 000E   PORTB.6=1;
000081 9ac6      	SBI  0x18,6
                 ; 0000 000F   PORTB.7=1;
000082 9ac7      	SBI  0x18,7
                 ; 0000 0010   if(!PINB.0) return 10;
000083 99b0      	SBIC 0x16,0
000084 c003      	RJMP _0xC
000085 e0ea      	LDI  R30,LOW(10)
000086 e0f0      	LDI  R31,HIGH(10)
000087 9508      	RET
                 ; 0000 0011   if(!PINB.1) return 9;
                 _0xC:
000088 99b1      	SBIC 0x16,1
000089 c003      	RJMP _0xD
00008a e0e9      	LDI  R30,LOW(9)
00008b e0f0      	LDI  R31,HIGH(9)
00008c 9508      	RET
                 ; 0000 0012   if(!PINB.2) return 8;
                 _0xD:
00008d 99b2      	SBIC 0x16,2
00008e c003      	RJMP _0xE
00008f e0e8      	LDI  R30,LOW(8)
000090 e0f0      	LDI  R31,HIGH(8)
000091 9508      	RET
                 ; 0000 0013   if(!PINB.3) return 7;
                 _0xE:
000092 99b3      	SBIC 0x16,3
000093 c003      	RJMP _0xF
000094 e0e7      	LDI  R30,LOW(7)
000095 e0f0      	LDI  R31,HIGH(7)
000096 9508      	RET
                 ; 0000 0014 
                 ; 0000 0015   PORTB.4=1;
                 _0xF:
000097 9ac4      	SBI  0x18,4
                 ; 0000 0016   PORTB.5=0;
000098 98c5      	CBI  0x18,5
                 ; 0000 0017   PORTB.6=1;
000099 9ac6      	SBI  0x18,6
                 ; 0000 0018   PORTB.7=1;
00009a 9ac7      	SBI  0x18,7
                 ; 0000 0019   if(!PINB.0) return 11;
00009b 99b0      	SBIC 0x16,0
00009c c003      	RJMP _0x18
00009d e0eb      	LDI  R30,LOW(11)
00009e e0f0      	LDI  R31,HIGH(11)
00009f 9508      	RET
                 ; 0000 001A   if(!PINB.1) return 6;
                 _0x18:
0000a0 99b1      	SBIC 0x16,1
0000a1 c003      	RJMP _0x19
0000a2 e0e6      	LDI  R30,LOW(6)
0000a3 e0f0      	LDI  R31,HIGH(6)
0000a4 9508      	RET
                 ; 0000 001B   if(!PINB.2) return 5;
                 _0x19:
0000a5 99b2      	SBIC 0x16,2
0000a6 c003      	RJMP _0x1A
0000a7 e0e5      	LDI  R30,LOW(5)
0000a8 e0f0      	LDI  R31,HIGH(5)
0000a9 9508      	RET
                 ; 0000 001C   if(!PINB.3) return 4;
                 _0x1A:
0000aa 99b3      	SBIC 0x16,3
0000ab c003      	RJMP _0x1B
0000ac e0e4      	LDI  R30,LOW(4)
0000ad e0f0      	LDI  R31,HIGH(4)
0000ae 9508      	RET
                 ; 0000 001D 
                 ; 0000 001E   PORTB.4=1;
                 _0x1B:
0000af 9ac4      	SBI  0x18,4
                 ; 0000 001F   PORTB.5=1;
0000b0 9ac5      	SBI  0x18,5
                 ; 0000 0020   PORTB.6=0;
0000b1 98c6      	CBI  0x18,6
                 ; 0000 0021   PORTB.7=1;
0000b2 9ac7      	SBI  0x18,7
                 ; 0000 0022   if(!PINB.0) return 12;
0000b3 99b0      	SBIC 0x16,0
0000b4 c003      	RJMP _0x24
0000b5 e0ec      	LDI  R30,LOW(12)
0000b6 e0f0      	LDI  R31,HIGH(12)
0000b7 9508      	RET
                 ; 0000 0023   if(!PINB.1) return 3;
                 _0x24:
0000b8 99b1      	SBIC 0x16,1
0000b9 c003      	RJMP _0x25
0000ba e0e3      	LDI  R30,LOW(3)
0000bb e0f0      	LDI  R31,HIGH(3)
0000bc 9508      	RET
                 ; 0000 0024   if(!PINB.2) return 2;
                 _0x25:
0000bd 99b2      	SBIC 0x16,2
0000be c003      	RJMP _0x26
0000bf e0e2      	LDI  R30,LOW(2)
0000c0 e0f0      	LDI  R31,HIGH(2)
0000c1 9508      	RET
                 ; 0000 0025   if(!PINB.3) return 1;
                 _0x26:
0000c2 99b3      	SBIC 0x16,3
0000c3 c003      	RJMP _0x27
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 e0f0      	LDI  R31,HIGH(1)
0000c6 9508      	RET
                 ; 0000 0026 
                 ; 0000 0027   PORTB.4=1;
                 _0x27:
0000c7 9ac4      	SBI  0x18,4
                 ; 0000 0028   PORTB.5=1;
0000c8 9ac5      	SBI  0x18,5
                 ; 0000 0029   PORTB.6=1;
0000c9 9ac6      	SBI  0x18,6
                 ; 0000 002A   PORTB.7=0;
0000ca 98c7      	CBI  0x18,7
                 ; 0000 002B   if(!PINB.0) return 13;
0000cb 99b0      	SBIC 0x16,0
0000cc c003      	RJMP _0x30
0000cd e0ed      	LDI  R30,LOW(13)
0000ce e0f0      	LDI  R31,HIGH(13)
0000cf 9508      	RET
                 ; 0000 002C   if(!PINB.1) return 14;
                 _0x30:
0000d0 99b1      	SBIC 0x16,1
0000d1 c003      	RJMP _0x31
0000d2 e0ee      	LDI  R30,LOW(14)
0000d3 e0f0      	LDI  R31,HIGH(14)
0000d4 9508      	RET
                 ; 0000 002D   if(!PINB.2) return 0;
                 _0x31:
0000d5 99b2      	SBIC 0x16,2
0000d6 c003      	RJMP _0x32
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 e0f0      	LDI  R31,HIGH(0)
0000d9 9508      	RET
                 ; 0000 002E   if(!PINB.3) return 15;
                 _0x32:
0000da 99b3      	SBIC 0x16,3
0000db c003      	RJMP _0x33
0000dc e0ef      	LDI  R30,LOW(15)
0000dd e0f0      	LDI  R31,HIGH(15)
0000de 9508      	RET
                 ; 0000 002F 
                 ; 0000 0030   return 20;
                 _0x33:
0000df e1e4      	LDI  R30,LOW(20)
0000e0 e0f0      	LDI  R31,HIGH(20)
0000e1 9508      	RET
                 ; 0000 0031 }
                 ; .FEND
                 ;//-----------------------------------------------------------------------
                 ;void main(void)
                 ; 0000 0034 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0035   DDRA=0xff;
0000e2 efef      	LDI  R30,LOW(255)
0000e3 bbea      	OUT  0x1A,R30
                 ; 0000 0036   DDRB=0b11110000;
0000e4 efe0      	LDI  R30,LOW(240)
0000e5 bbe7      	OUT  0x17,R30
                 ; 0000 0037   PORTB=0b00001111;
0000e6 e0ef      	LDI  R30,LOW(15)
0000e7 bbe8      	OUT  0x18,R30
                 ; 0000 0038   DDRC=0xff;
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bbe4      	OUT  0x14,R30
                 ; 0000 0039   DDRD=0x7f;
0000ea e7ef      	LDI  R30,LOW(127)
0000eb bbe1      	OUT  0x11,R30
                 ; 0000 003A 
                 ; 0000 003B   lcd_init(16);
0000ec e1a0      	LDI  R26,LOW(16)
0000ed 940e 036b 	CALL _lcd_init
                 ; 0000 003C   lcd_puts("Enter 2 Digit : ");
                +
0000ef e6a0     +LDI R26 , LOW ( _0x34 + ( 0 ) )
0000f0 e0b2     +LDI R27 , HIGH ( _0x34 + ( 0 ) )
                 	__POINTW2MN _0x34,0
0000f1 940e 035a 	CALL _lcd_puts
                 ; 0000 003D 
                 ; 0000 003E   do
                 _0x36:
                 ; 0000 003F     d=key_pad();
0000f3 df8b      	RCALL _key_pad
0000f4 014f      	MOVW R8,R30
                 ; 0000 0040   while(d==20);
0000f5 e1e4      	LDI  R30,LOW(20)
0000f6 e0f0      	LDI  R31,HIGH(20)
0000f7 15e8      	CP   R30,R8
0000f8 05f9      	CPC  R31,R9
0000f9 f3c9      	BREQ _0x36
                 ; 0000 0041   lcd_putchar(d+48);
0000fa 2da8      	MOV  R26,R8
0000fb 5da0      	SUBI R26,-LOW(48)
0000fc 940e 0343 	CALL _lcd_putchar
                 ; 0000 0042 
                 ; 0000 0043   delay_ms(300);
0000fe e2ac      	LDI  R26,LOW(300)
0000ff e0b1      	LDI  R27,HIGH(300)
000100 940e 03f5 	CALL _delay_ms
                 ; 0000 0044 
                 ; 0000 0045   do
                 _0x39:
                 ; 0000 0046     y=key_pad();
000102 df7c      	RCALL _key_pad
000103 013f      	MOVW R6,R30
                 ; 0000 0047   while(y==20);
000104 e1e4      	LDI  R30,LOW(20)
000105 e0f0      	LDI  R31,HIGH(20)
000106 15e6      	CP   R30,R6
000107 05f7      	CPC  R31,R7
000108 f3c9      	BREQ _0x39
                 ; 0000 0048   lcd_putchar(y+48);
000109 2da6      	MOV  R26,R6
00010a 5da0      	SUBI R26,-LOW(48)
00010b 940e 0343 	CALL _lcd_putchar
                 ; 0000 0049 
                 ; 0000 004A   x=d*10+y;
00010d 01f4      	MOVW R30,R8
00010e e0aa      	LDI  R26,LOW(10)
00010f e0b0      	LDI  R27,HIGH(10)
000110 940e 0414 	CALL __MULW12
000112 0de6      	ADD  R30,R6
000113 1df7      	ADC  R31,R7
000114 012f      	MOVW R4,R30
                 ; 0000 004B   delay_ms(950);
000115 eba6      	LDI  R26,LOW(950)
000116 e0b3      	LDI  R27,HIGH(950)
000117 940e 03f5 	CALL _delay_ms
                 ; 0000 004C 
                 ; 0000 004D   while (1)
                 _0x3B:
                 ; 0000 004E    {
                 ; 0000 004F         if(PIND.7==0) p=1;
000119 9987      	SBIC 0x10,7
00011a c003      	RJMP _0x3E
00011b e0e1      	LDI  R30,LOW(1)
00011c e0f0      	LDI  R31,HIGH(1)
00011d c002      	RJMP _0x43
                 ; 0000 0050         else p=-1;
                 _0x3E:
00011e efef      	LDI  R30,LOW(65535)
00011f efff      	LDI  R31,HIGH(65535)
                 _0x43:
000120 015f      	MOVW R10,R30
                 ; 0000 0051 
                 ; 0000 0052         y=x%10;
000121 01d2      	MOVW R26,R4
000122 e0ea      	LDI  R30,LOW(10)
000123 e0f0      	LDI  R31,HIGH(10)
000124 940e 0431 	CALL __MODW21
000126 013f      	MOVW R6,R30
                 ; 0000 0053         d=x/10;
000127 01d2      	MOVW R26,R4
000128 e0ea      	LDI  R30,LOW(10)
000129 e0f0      	LDI  R31,HIGH(10)
00012a 940e 042c 	CALL __DIVW21
00012c 014f      	MOVW R8,R30
                 ; 0000 0054         PORTC=seg_code[y];
00012d 01f3      	MOVW R30,R6
00012e 940e 03b3 	CALL SUBOPT_0x0
000130 bbe5      	OUT  0x15,R30
                 ; 0000 0055         PORTD=seg_code[d];
000131 01f4      	MOVW R30,R8
000132 940e 03b3 	CALL SUBOPT_0x0
000134 bbe2      	OUT  0x12,R30
                 ; 0000 0056 
                 ; 0000 0057         sprintf(str,"%d",x);
000135 e8e5      	LDI  R30,LOW(_str)
000136 e0f2      	LDI  R31,HIGH(_str)
000137 93fa      	ST   -Y,R31
000138 93ea      	ST   -Y,R30
                +
000139 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
00013a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
00013b 93fa      	ST   -Y,R31
00013c 93ea      	ST   -Y,R30
00013d 01f2      	MOVW R30,R4
00013e 940e 0407 	CALL __CWD1
000140 940e 0455 	CALL __PUTPARD1
000142 e084      	LDI  R24,4
000143 940e 02d6 	CALL _sprintf
000145 9628      	ADIW R28,8
                 ; 0000 0058         lcd_clear();
000146 940e 0337 	CALL _lcd_clear
                 ; 0000 0059         lcd_puts(str);
000148 e8a5      	LDI  R26,LOW(_str)
000149 e0b2      	LDI  R27,HIGH(_str)
00014a 940e 035a 	CALL _lcd_puts
                 ; 0000 005A 
                 ; 0000 005B         delay_ms(950);
00014c eba6      	LDI  R26,LOW(950)
00014d e0b3      	LDI  R27,HIGH(950)
00014e 940e 03f5 	CALL _delay_ms
                 ; 0000 005C 
                 ; 0000 005D         x+=p;
                +
000150 0c4a     +ADD R4 , R10
000151 1c5b     +ADC R5 , R11
                 	__ADDWRR 4,5,10,11
                 ; 0000 005E         if(x>99) x=0;
000152 e6e3      	LDI  R30,LOW(99)
000153 e0f0      	LDI  R31,HIGH(99)
000154 15e4      	CP   R30,R4
000155 05f5      	CPC  R31,R5
000156 f414      	BRGE _0x40
000157 2444      	CLR  R4
000158 2455      	CLR  R5
                 ; 0000 005F         if(x<0) x=99;
                 _0x40:
000159 2400      	CLR  R0
00015a 1440      	CP   R4,R0
00015b 0450      	CPC  R5,R0
00015c f41c      	BRGE _0x41
00015d e6e3      	LDI  R30,LOW(99)
00015e e0f0      	LDI  R31,HIGH(99)
00015f 012f      	MOVW R4,R30
                 ; 0000 0060    }
                 _0x41:
000160 cfb8      	RJMP _0x3B
                 ; 0000 0061 
                 ; 0000 0062 }
                 _0x42:
000161 cfff      	RJMP _0x42
                 ; .FEND
                 
                 	.DSEG
                 _0x34:
000260           	.BYTE 0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000162 93ba      	ST   -Y,R27
000163 93aa      	ST   -Y,R26
000164 931a      	ST   -Y,R17
000165 930a      	ST   -Y,R16
000166 81aa      	LDD  R26,Y+2
000167 81bb      	LDD  R27,Y+2+1
000168 9612      	ADIW R26,2
000169 940e 044d 	CALL __GETW1P
00016b 9730      	SBIW R30,0
00016c f159      	BREQ _0x2000010
00016d 81aa      	LDD  R26,Y+2
00016e 81bb      	LDD  R27,Y+2+1
00016f 9614      	ADIW R26,4
000170 940e 044d 	CALL __GETW1P
000172 018f      	MOVW R16,R30
000173 9730      	SBIW R30,0
000174 f061      	BREQ _0x2000012
                +
000175 3002     +CPI R16 , LOW ( 2 )
000176 e0e0     +LDI R30 , HIGH ( 2 )
000177 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000178 f098      	BRLO _0x2000013
000179 01f8      	MOVW R30,R16
00017a 9731      	SBIW R30,1
00017b 018f      	MOVW R16,R30
                +
00017c 81aa     +LDD R26 , Y + 2
00017d 81bb     +LDD R27 , Y + 2 + 1
00017e 9614     +ADIW R26 , 4
00017f 93ed     +ST X + , R30
000180 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000181 81aa      	LDD  R26,Y+2
000182 81bb      	LDD  R27,Y+2+1
000183 9612      	ADIW R26,2
000184 91ed      	LD   R30,X+
000185 91fd      	LD   R31,X+
000186 9631      	ADIW R30,1
000187 93fe      	ST   -X,R31
000188 93ee      	ST   -X,R30
000189 9731      	SBIW R30,1
00018a 81ac      	LDD  R26,Y+4
00018b 83a0      	STD  Z+0,R26
                 _0x2000013:
00018c 81aa      	LDD  R26,Y+2
00018d 81bb      	LDD  R27,Y+2+1
00018e 940e 044d 	CALL __GETW1P
000190 23ff      	TST  R31
000191 f02a      	BRMI _0x2000014
000192 91ed      	LD   R30,X+
000193 91fd      	LD   R31,X+
000194 9631      	ADIW R30,1
000195 93fe      	ST   -X,R31
000196 93ee      	ST   -X,R30
                 _0x2000014:
000197 c006      	RJMP _0x2000015
                 _0x2000010:
000198 81aa      	LDD  R26,Y+2
000199 81bb      	LDD  R27,Y+2+1
00019a efef      	LDI  R30,LOW(65535)
00019b efff      	LDI  R31,HIGH(65535)
00019c 93ed      	ST   X+,R30
00019d 93fc      	ST   X,R31
                 _0x2000015:
00019e 8119      	LDD  R17,Y+1
00019f 8108      	LDD  R16,Y+0
0001a0 9625      	ADIW R28,5
0001a1 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001a2 93ba      	ST   -Y,R27
0001a3 93aa      	ST   -Y,R26
0001a4 9726      	SBIW R28,6
0001a5 940e 045a 	CALL __SAVELOCR6
0001a7 e010      	LDI  R17,0
0001a8 85ac      	LDD  R26,Y+12
0001a9 85bd      	LDD  R27,Y+12+1
0001aa e0e0      	LDI  R30,LOW(0)
0001ab e0f0      	LDI  R31,HIGH(0)
0001ac 93ed      	ST   X+,R30
0001ad 93fc      	ST   X,R31
                 _0x2000016:
0001ae 89ea      	LDD  R30,Y+18
0001af 89fb      	LDD  R31,Y+18+1
0001b0 9631      	ADIW R30,1
0001b1 8bea      	STD  Y+18,R30
0001b2 8bfb      	STD  Y+18+1,R31
0001b3 9731      	SBIW R30,1
0001b4 91e4      	LPM  R30,Z
0001b5 2f2e      	MOV  R18,R30
0001b6 30e0      	CPI  R30,0
0001b7 f409      	BRNE PC+2
0001b8 c115      	RJMP _0x2000018
0001b9 2fe1      	MOV  R30,R17
0001ba 30e0      	CPI  R30,0
0001bb f439      	BRNE _0x200001C
0001bc 3225      	CPI  R18,37
0001bd f411      	BRNE _0x200001D
0001be e011      	LDI  R17,LOW(1)
0001bf c002      	RJMP _0x200001E
                 _0x200001D:
0001c0 940e 03bb 	CALL SUBOPT_0x1
                 _0x200001E:
0001c2 c10a      	RJMP _0x200001B
                 _0x200001C:
0001c3 30e1      	CPI  R30,LOW(0x1)
0001c4 f4a9      	BRNE _0x200001F
0001c5 3225      	CPI  R18,37
0001c6 f419      	BRNE _0x2000020
0001c7 940e 03bb 	CALL SUBOPT_0x1
0001c9 c102      	RJMP _0x20000CC
                 _0x2000020:
0001ca e012      	LDI  R17,LOW(2)
0001cb e040      	LDI  R20,LOW(0)
0001cc e000      	LDI  R16,LOW(0)
0001cd 322d      	CPI  R18,45
0001ce f411      	BRNE _0x2000021
0001cf e001      	LDI  R16,LOW(1)
0001d0 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001d1 322b      	CPI  R18,43
0001d2 f411      	BRNE _0x2000022
0001d3 e24b      	LDI  R20,LOW(43)
0001d4 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001d5 3220      	CPI  R18,32
0001d6 f411      	BRNE _0x2000023
0001d7 e240      	LDI  R20,LOW(32)
0001d8 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001d9 c002      	RJMP _0x2000024
                 _0x200001F:
0001da 30e2      	CPI  R30,LOW(0x2)
0001db f439      	BRNE _0x2000025
                 _0x2000024:
0001dc e050      	LDI  R21,LOW(0)
0001dd e013      	LDI  R17,LOW(3)
0001de 3320      	CPI  R18,48
0001df f411      	BRNE _0x2000026
0001e0 6800      	ORI  R16,LOW(128)
0001e1 c0eb      	RJMP _0x200001B
                 _0x2000026:
0001e2 c003      	RJMP _0x2000027
                 _0x2000025:
0001e3 30e3      	CPI  R30,LOW(0x3)
0001e4 f009      	BREQ PC+2
0001e5 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001e6 3320      	CPI  R18,48
0001e7 f010      	BRLO _0x200002A
0001e8 332a      	CPI  R18,58
0001e9 f008      	BRLO _0x200002B
                 _0x200002A:
0001ea c007      	RJMP _0x2000029
                 _0x200002B:
0001eb e0aa      	LDI  R26,LOW(10)
0001ec 9f5a      	MUL  R21,R26
0001ed 2d50      	MOV  R21,R0
0001ee 2fe2      	MOV  R30,R18
0001ef 53e0      	SUBI R30,LOW(48)
0001f0 0f5e      	ADD  R21,R30
0001f1 c0db      	RJMP _0x200001B
                 _0x2000029:
0001f2 2fe2      	MOV  R30,R18
0001f3 36e3      	CPI  R30,LOW(0x63)
0001f4 f449      	BRNE _0x200002F
0001f5 940e 03c2 	CALL SUBOPT_0x2
0001f7 89e8      	LDD  R30,Y+16
0001f8 89f9      	LDD  R31,Y+16+1
0001f9 81a4      	LDD  R26,Z+4
0001fa 93aa      	ST   -Y,R26
0001fb 940e 03c8 	CALL SUBOPT_0x3
0001fd c0ce      	RJMP _0x2000030
                 _0x200002F:
0001fe 37e3      	CPI  R30,LOW(0x73)
0001ff f441      	BRNE _0x2000032
000200 940e 03c2 	CALL SUBOPT_0x2
000202 940e 03ce 	CALL SUBOPT_0x4
000204 940e 039a 	CALL _strlen
000206 2f1e      	MOV  R17,R30
000207 c00a      	RJMP _0x2000033
                 _0x2000032:
000208 37e0      	CPI  R30,LOW(0x70)
000209 f461      	BRNE _0x2000035
00020a 940e 03c2 	CALL SUBOPT_0x2
00020c 940e 03ce 	CALL SUBOPT_0x4
00020e 940e 03a6 	CALL _strlenf
000210 2f1e      	MOV  R17,R30
000211 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000212 6002      	ORI  R16,LOW(2)
000213 770f      	ANDI R16,LOW(127)
000214 e030      	LDI  R19,LOW(0)
000215 c034      	RJMP _0x2000036
                 _0x2000035:
000216 36e4      	CPI  R30,LOW(0x64)
000217 f011      	BREQ _0x2000039
000218 36e9      	CPI  R30,LOW(0x69)
000219 f411      	BRNE _0x200003A
                 _0x2000039:
00021a 6004      	ORI  R16,LOW(4)
00021b c002      	RJMP _0x200003B
                 _0x200003A:
00021c 37e5      	CPI  R30,LOW(0x75)
00021d f431      	BRNE _0x200003C
                 _0x200003B:
00021e e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00021f e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000220 83ee      	STD  Y+6,R30
000221 83ff      	STD  Y+6+1,R31
000222 e015      	LDI  R17,LOW(5)
000223 c00c      	RJMP _0x200003D
                 _0x200003C:
000224 35e8      	CPI  R30,LOW(0x58)
000225 f411      	BRNE _0x200003F
000226 6008      	ORI  R16,LOW(8)
000227 c003      	RJMP _0x2000040
                 _0x200003F:
000228 37e8      	CPI  R30,LOW(0x78)
000229 f009      	BREQ PC+2
00022a c0a1      	RJMP _0x2000071
                 _0x2000040:
00022b e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00022c e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00022d 83ee      	STD  Y+6,R30
00022e 83ff      	STD  Y+6+1,R31
00022f e014      	LDI  R17,LOW(4)
                 _0x200003D:
000230 ff02      	SBRS R16,2
000231 c014      	RJMP _0x2000042
000232 940e 03c2 	CALL SUBOPT_0x2
000234 940e 03d8 	CALL SUBOPT_0x5
000236 85ab      	LDD  R26,Y+11
000237 23aa      	TST  R26
000238 f43a      	BRPL _0x2000043
000239 85ea      	LDD  R30,Y+10
00023a 85fb      	LDD  R31,Y+10+1
00023b 940e 0403 	CALL __ANEGW1
00023d 87ea      	STD  Y+10,R30
00023e 87fb      	STD  Y+10+1,R31
00023f e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000240 3040      	CPI  R20,0
000241 f011      	BREQ _0x2000044
000242 5f1f      	SUBI R17,-LOW(1)
000243 c001      	RJMP _0x2000045
                 _0x2000044:
000244 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000245 c004      	RJMP _0x2000046
                 _0x2000042:
000246 940e 03c2 	CALL SUBOPT_0x2
000248 940e 03d8 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
00024a fd00      	SBRC R16,0
00024b c011      	RJMP _0x2000047
                 _0x2000048:
00024c 1715      	CP   R17,R21
00024d f478      	BRSH _0x200004A
00024e ff07      	SBRS R16,7
00024f c008      	RJMP _0x200004B
000250 ff02      	SBRS R16,2
000251 c004      	RJMP _0x200004C
000252 7f0b      	ANDI R16,LOW(251)
000253 2f24      	MOV  R18,R20
000254 5011      	SUBI R17,LOW(1)
000255 c001      	RJMP _0x200004D
                 _0x200004C:
000256 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000257 c001      	RJMP _0x200004E
                 _0x200004B:
000258 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000259 940e 03bb 	CALL SUBOPT_0x1
00025b 5051      	SUBI R21,LOW(1)
00025c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00025d 2f31      	MOV  R19,R17
00025e ff01      	SBRS R16,1
00025f c017      	RJMP _0x200004F
                 _0x2000050:
000260 3030      	CPI  R19,0
000261 f0a1      	BREQ _0x2000052
000262 ff03      	SBRS R16,3
000263 c006      	RJMP _0x2000053
000264 81ee      	LDD  R30,Y+6
000265 81ff      	LDD  R31,Y+6+1
000266 9125      	LPM  R18,Z+
000267 83ee      	STD  Y+6,R30
000268 83ff      	STD  Y+6+1,R31
000269 c005      	RJMP _0x2000054
                 _0x2000053:
00026a 81ae      	LDD  R26,Y+6
00026b 81bf      	LDD  R27,Y+6+1
00026c 912d      	LD   R18,X+
00026d 83ae      	STD  Y+6,R26
00026e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00026f 940e 03bb 	CALL SUBOPT_0x1
000271 3050      	CPI  R21,0
000272 f009      	BREQ _0x2000055
000273 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000274 5031      	SUBI R19,LOW(1)
000275 cfea      	RJMP _0x2000050
                 _0x2000052:
000276 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000277 e320      	LDI  R18,LOW(48)
000278 81ee      	LDD  R30,Y+6
000279 81ff      	LDD  R31,Y+6+1
00027a 940e 0451 	CALL __GETW1PF
00027c 87e8      	STD  Y+8,R30
00027d 87f9      	STD  Y+8+1,R31
00027e 81ee      	LDD  R30,Y+6
00027f 81ff      	LDD  R31,Y+6+1
000280 9632      	ADIW R30,2
000281 83ee      	STD  Y+6,R30
000282 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000283 85e8      	LDD  R30,Y+8
000284 85f9      	LDD  R31,Y+8+1
000285 85aa      	LDD  R26,Y+10
000286 85bb      	LDD  R27,Y+10+1
000287 17ae      	CP   R26,R30
000288 07bf      	CPC  R27,R31
000289 f050      	BRLO _0x200005C
00028a 5f2f      	SUBI R18,-LOW(1)
00028b 85a8      	LDD  R26,Y+8
00028c 85b9      	LDD  R27,Y+8+1
00028d 85ea      	LDD  R30,Y+10
00028e 85fb      	LDD  R31,Y+10+1
00028f 1bea      	SUB  R30,R26
000290 0bfb      	SBC  R31,R27
000291 87ea      	STD  Y+10,R30
000292 87fb      	STD  Y+10+1,R31
000293 cfef      	RJMP _0x200005A
                 _0x200005C:
000294 332a      	CPI  R18,58
000295 f028      	BRLO _0x200005D
000296 ff03      	SBRS R16,3
000297 c002      	RJMP _0x200005E
000298 5f29      	SUBI R18,-LOW(7)
000299 c001      	RJMP _0x200005F
                 _0x200005E:
00029a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00029b fd04      	SBRC R16,4
00029c c01a      	RJMP _0x2000061
00029d 3321      	CPI  R18,49
00029e f420      	BRSH _0x2000063
00029f 85a8      	LDD  R26,Y+8
0002a0 85b9      	LDD  R27,Y+8+1
0002a1 9711      	SBIW R26,1
0002a2 f409      	BRNE _0x2000062
                 _0x2000063:
0002a3 c009      	RJMP _0x20000CD
                 _0x2000062:
0002a4 1753      	CP   R21,R19
0002a5 f010      	BRLO _0x2000067
0002a6 ff00      	SBRS R16,0
0002a7 c001      	RJMP _0x2000068
                 _0x2000067:
0002a8 c013      	RJMP _0x2000066
                 _0x2000068:
0002a9 e220      	LDI  R18,LOW(32)
0002aa ff07      	SBRS R16,7
0002ab c00b      	RJMP _0x2000069
0002ac e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002ad 6100      	ORI  R16,LOW(16)
0002ae ff02      	SBRS R16,2
0002af c007      	RJMP _0x200006A
0002b0 7f0b      	ANDI R16,LOW(251)
0002b1 934a      	ST   -Y,R20
0002b2 940e 03c8 	CALL SUBOPT_0x3
0002b4 3050      	CPI  R21,0
0002b5 f009      	BREQ _0x200006B
0002b6 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002b7 940e 03bb 	CALL SUBOPT_0x1
0002b9 3050      	CPI  R21,0
0002ba f009      	BREQ _0x200006C
0002bb 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002bc 5031      	SUBI R19,LOW(1)
0002bd 85a8      	LDD  R26,Y+8
0002be 85b9      	LDD  R27,Y+8+1
0002bf 9712      	SBIW R26,2
0002c0 f008      	BRLO _0x2000059
0002c1 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002c2 ff00      	SBRS R16,0
0002c3 c008      	RJMP _0x200006D
                 _0x200006E:
0002c4 3050      	CPI  R21,0
0002c5 f031      	BREQ _0x2000070
0002c6 5051      	SUBI R21,LOW(1)
0002c7 e2e0      	LDI  R30,LOW(32)
0002c8 93ea      	ST   -Y,R30
0002c9 940e 03c8 	CALL SUBOPT_0x3
0002cb cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002cc e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002cd cee0      	RJMP _0x2000016
                 _0x2000018:
0002ce 85ac      	LDD  R26,Y+12
0002cf 85bd      	LDD  R27,Y+12+1
0002d0 940e 044d 	CALL __GETW1P
0002d2 940e 0461 	CALL __LOADLOCR6
0002d4 9664      	ADIW R28,20
0002d5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002d6 92ff      	PUSH R15
0002d7 2ef8      	MOV  R15,R24
0002d8 9726      	SBIW R28,6
0002d9 940e 045c 	CALL __SAVELOCR4
0002db 940e 03e0 	CALL SUBOPT_0x6
0002dd 9730      	SBIW R30,0
0002de f419      	BRNE _0x2000072
0002df efef      	LDI  R30,LOW(65535)
0002e0 efff      	LDI  R31,HIGH(65535)
0002e1 c023      	RJMP _0x2080002
                 _0x2000072:
0002e2 01de      	MOVW R26,R28
0002e3 9616      	ADIW R26,6
0002e4 940e 03ff 	CALL __ADDW2R15
0002e6 018d      	MOVW R16,R26
0002e7 940e 03e0 	CALL SUBOPT_0x6
0002e9 83ee      	STD  Y+6,R30
0002ea 83ff      	STD  Y+6+1,R31
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 87e8      	STD  Y+8,R30
0002ed 87e9      	STD  Y+8+1,R30
0002ee 01de      	MOVW R26,R28
0002ef 961a      	ADIW R26,10
0002f0 940e 03ff 	CALL __ADDW2R15
0002f2 940e 044d 	CALL __GETW1P
0002f4 93fa      	ST   -Y,R31
0002f5 93ea      	ST   -Y,R30
0002f6 931a      	ST   -Y,R17
0002f7 930a      	ST   -Y,R16
0002f8 e6e2      	LDI  R30,LOW(_put_buff_G100)
0002f9 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002fa 93fa      	ST   -Y,R31
0002fb 93ea      	ST   -Y,R30
0002fc 01de      	MOVW R26,R28
0002fd 961a      	ADIW R26,10
0002fe dea3      	RCALL __print_G100
0002ff 019f      	MOVW R18,R30
000300 81ae      	LDD  R26,Y+6
000301 81bf      	LDD  R27,Y+6+1
000302 e0e0      	LDI  R30,LOW(0)
000303 93ec      	ST   X,R30
000304 01f9      	MOVW R30,R18
                 _0x2080002:
000305 940e 0463 	CALL __LOADLOCR4
000307 962a      	ADIW R28,10
000308 90ff      	POP  R15
000309 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00030a 93aa      	ST   -Y,R26
00030b b3eb      	IN   R30,0x1B
00030c 70ef      	ANDI R30,LOW(0xF)
00030d 2fae      	MOV  R26,R30
00030e 81e8      	LD   R30,Y
00030f 7fe0      	ANDI R30,LOW(0xF0)
000310 2bea      	OR   R30,R26
000311 bbeb      	OUT  0x1B,R30
                +
000312 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000313 958a     +DEC R24
000314 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000315 9ada      	SBI  0x1B,2
                +
000316 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000317 958a     +DEC R24
000318 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000319 98da      	CBI  0x1B,2
                +
00031a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00031b 958a     +DEC R24
00031c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031d c07a      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00031e 93aa      	ST   -Y,R26
00031f 81a8      	LD   R26,Y
000320 dfe9      	RCALL __lcd_write_nibble_G101
000321 81e8          ld    r30,y
000322 95e2          swap  r30
000323 83e8          st    y,r30
000324 81a8      	LD   R26,Y
000325 dfe4      	RCALL __lcd_write_nibble_G101
                +
000326 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000329 c06e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00032a 93aa      	ST   -Y,R26
00032b 81e8      	LD   R30,Y
00032c e0f0      	LDI  R31,0
00032d 56eb      	SUBI R30,LOW(-__base_y_G101)
00032e 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00032f 81e0      	LD   R30,Z
000330 81a9      	LDD  R26,Y+1
000331 0fae      	ADD  R26,R30
000332 dfeb      	RCALL __lcd_write_data
000333 80d9      	LDD  R13,Y+1
000334 80c8      	LDD  R12,Y+0
000335 9622      	ADIW R28,2
000336 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000337 e0a2      	LDI  R26,LOW(2)
000338 940e 03e7 	CALL SUBOPT_0x7
00033a e0ac      	LDI  R26,LOW(12)
00033b dfe2      	RCALL __lcd_write_data
00033c e0a1      	LDI  R26,LOW(1)
00033d 940e 03e7 	CALL SUBOPT_0x7
00033f e0e0      	LDI  R30,LOW(0)
000340 2ece      	MOV  R12,R30
000341 2ede      	MOV  R13,R30
000342 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000343 93aa      	ST   -Y,R26
000344 81a8      	LD   R26,Y
000345 30aa      	CPI  R26,LOW(0xA)
000346 f021      	BREQ _0x2020005
000347 91e0 0299 	LDS  R30,__lcd_maxx
000349 16de      	CP   R13,R30
00034a f048      	BRLO _0x2020004
                 _0x2020005:
00034b e0e0      	LDI  R30,LOW(0)
00034c 93ea      	ST   -Y,R30
00034d 94c3      	INC  R12
00034e 2dac      	MOV  R26,R12
00034f dfda      	RCALL _lcd_gotoxy
000350 81a8      	LD   R26,Y
000351 30aa      	CPI  R26,LOW(0xA)
000352 f409      	BRNE _0x2020007
000353 c044      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000354 94d3      	INC  R13
000355 9ad8      	SBI  0x1B,0
000356 81a8      	LD   R26,Y
000357 dfc6      	RCALL __lcd_write_data
000358 98d8      	CBI  0x1B,0
000359 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00035a 93ba      	ST   -Y,R27
00035b 93aa      	ST   -Y,R26
00035c 931a      	ST   -Y,R17
                 _0x2020008:
00035d 81a9      	LDD  R26,Y+1
00035e 81ba      	LDD  R27,Y+1+1
00035f 91ed      	LD   R30,X+
000360 83a9      	STD  Y+1,R26
000361 83ba      	STD  Y+1+1,R27
000362 2f1e      	MOV  R17,R30
000363 30e0      	CPI  R30,0
000364 f019      	BREQ _0x202000A
000365 2fa1      	MOV  R26,R17
000366 dfdc      	RCALL _lcd_putchar
000367 cff5      	RJMP _0x2020008
                 _0x202000A:
000368 8118      	LDD  R17,Y+0
000369 9623      	ADIW R28,3
00036a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00036b 93aa      	ST   -Y,R26
00036c b3ea      	IN   R30,0x1A
00036d 6fe0      	ORI  R30,LOW(0xF0)
00036e bbea      	OUT  0x1A,R30
00036f 9ad2      	SBI  0x1A,2
000370 9ad0      	SBI  0x1A,0
000371 9ad1      	SBI  0x1A,1
000372 98da      	CBI  0x1B,2
000373 98d8      	CBI  0x1B,0
000374 98d9      	CBI  0x1B,1
000375 81e8      	LD   R30,Y
000376 93e0 0299 	STS  __lcd_maxx,R30
000378 58e0      	SUBI R30,-LOW(128)
                +
000379 93e0 0297+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00037b 81e8      	LD   R30,Y
00037c 54e0      	SUBI R30,-LOW(192)
                +
00037d 93e0 0298+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00037f e1a4      	LDI  R26,LOW(20)
000380 e0b0      	LDI  R27,0
000381 940e 03f5 	CALL _delay_ms
000383 940e 03ed 	CALL SUBOPT_0x8
000385 940e 03ed 	CALL SUBOPT_0x8
000387 940e 03ed 	CALL SUBOPT_0x8
000389 e2a0      	LDI  R26,LOW(32)
00038a df7f      	RCALL __lcd_write_nibble_G101
                +
00038b ec88     +LDI R24 , LOW ( 200 )
00038c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038d 9701     +SBIW R24 , 1
00038e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038f e2a8      	LDI  R26,LOW(40)
000390 df8d      	RCALL __lcd_write_data
000391 e0a4      	LDI  R26,LOW(4)
000392 df8b      	RCALL __lcd_write_data
000393 e8a5      	LDI  R26,LOW(133)
000394 df89      	RCALL __lcd_write_data
000395 e0a6      	LDI  R26,LOW(6)
000396 df87      	RCALL __lcd_write_data
000397 df9f      	RCALL _lcd_clear
                 _0x2080001:
000398 9621      	ADIW R28,1
000399 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00039a 93ba      	ST   -Y,R27
00039b 93aa      	ST   -Y,R26
00039c 91a9          ld   r26,y+
00039d 91b9          ld   r27,y+
00039e 27ee          clr  r30
00039f 27ff          clr  r31
                 strlen0:
0003a0 916d          ld   r22,x+
0003a1 2366          tst  r22
0003a2 f011          breq strlen1
0003a3 9631          adiw r30,1
0003a4 cffb          rjmp strlen0
                 strlen1:
0003a5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a6 93ba      	ST   -Y,R27
0003a7 93aa      	ST   -Y,R26
0003a8 27aa          clr  r26
0003a9 27bb          clr  r27
0003aa 91e9          ld   r30,y+
0003ab 91f9          ld   r31,y+
                 strlenf0:
0003ac 9005      	lpm  r0,z+
0003ad 2000          tst  r0
0003ae f011          breq strlenf1
0003af 9611          adiw r26,1
0003b0 cffb          rjmp strlenf0
                 strlenf1:
0003b1 01fd          movw r30,r26
0003b2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _seg_code:
000271           	.BYTE 0x14
                 _str:
000285           	.BYTE 0x10
                 __base_y_G101:
000295           	.BYTE 0x4
                 __lcd_maxx:
000299           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0003b3 e7a1      	LDI  R26,LOW(_seg_code)
0003b4 e0b2      	LDI  R27,HIGH(_seg_code)
0003b5 0fee      	LSL  R30
0003b6 1fff      	ROL  R31
0003b7 0fae      	ADD  R26,R30
0003b8 1fbf      	ADC  R27,R31
0003b9 91ec      	LD   R30,X
0003ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
0003bb 932a      	ST   -Y,R18
0003bc 85ad      	LDD  R26,Y+13
0003bd 85be      	LDD  R27,Y+13+1
0003be 85ef      	LDD  R30,Y+15
0003bf 89f8      	LDD  R31,Y+15+1
0003c0 9509      	ICALL
0003c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0003c2 89e8      	LDD  R30,Y+16
0003c3 89f9      	LDD  R31,Y+16+1
0003c4 9734      	SBIW R30,4
0003c5 8be8      	STD  Y+16,R30
0003c6 8bf9      	STD  Y+16+1,R31
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0003c8 85ad      	LDD  R26,Y+13
0003c9 85be      	LDD  R27,Y+13+1
0003ca 85ef      	LDD  R30,Y+15
0003cb 89f8      	LDD  R31,Y+15+1
0003cc 9509      	ICALL
0003cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0003ce 89a8      	LDD  R26,Y+16
0003cf 89b9      	LDD  R27,Y+16+1
0003d0 9614      	ADIW R26,4
0003d1 940e 044d 	CALL __GETW1P
0003d3 83ee      	STD  Y+6,R30
0003d4 83ff      	STD  Y+6+1,R31
0003d5 81ae      	LDD  R26,Y+6
0003d6 81bf      	LDD  R27,Y+6+1
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0003d8 89a8      	LDD  R26,Y+16
0003d9 89b9      	LDD  R27,Y+16+1
0003da 9614      	ADIW R26,4
0003db 940e 044d 	CALL __GETW1P
0003dd 87ea      	STD  Y+10,R30
0003de 87fb      	STD  Y+10+1,R31
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003e0 01de      	MOVW R26,R28
0003e1 961c      	ADIW R26,12
0003e2 940e 03ff 	CALL __ADDW2R15
0003e4 940e 044d 	CALL __GETW1P
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003e7 940e 031e 	CALL __lcd_write_data
0003e9 e0a3      	LDI  R26,LOW(3)
0003ea e0b0      	LDI  R27,0
0003eb 940c 03f5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003ed e3a0      	LDI  R26,LOW(48)
0003ee 940e 030a 	CALL __lcd_write_nibble_G101
                +
0003f0 ec88     +LDI R24 , LOW ( 200 )
0003f1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003f2 9701     +SBIW R24 , 1
0003f3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003f4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f5 9610      	adiw r26,0
0003f6 f039      	breq __delay_ms1
                 __delay_ms0:
0003f7 95a8      	wdr
                +
0003f8 ed80     +LDI R24 , LOW ( 0x7D0 )
0003f9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003fa 9701     +SBIW R24 , 1
0003fb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003fc 9711      	sbiw r26,1
0003fd f7c9      	brne __delay_ms0
                 __delay_ms1:
0003fe 9508      	ret
                 
                 __ADDW2R15:
0003ff 2400      	CLR  R0
000400 0daf      	ADD  R26,R15
000401 1db0      	ADC  R27,R0
000402 9508      	RET
                 
                 __ANEGW1:
000403 95f1      	NEG  R31
000404 95e1      	NEG  R30
000405 40f0      	SBCI R31,0
000406 9508      	RET
                 
                 __CWD1:
000407 2f6f      	MOV  R22,R31
000408 0f66      	ADD  R22,R22
000409 0b66      	SBC  R22,R22
00040a 2f76      	MOV  R23,R22
00040b 9508      	RET
                 
                 __MULW12U:
00040c 9ffa      	MUL  R31,R26
00040d 2df0      	MOV  R31,R0
00040e 9feb      	MUL  R30,R27
00040f 0df0      	ADD  R31,R0
000410 9fea      	MUL  R30,R26
000411 2de0      	MOV  R30,R0
000412 0df1      	ADD  R31,R1
000413 9508      	RET
                 
                 __MULW12:
000414 d02a      	RCALL __CHKSIGNW
000415 dff6      	RCALL __MULW12U
000416 f40e      	BRTC __MULW121
000417 dfeb      	RCALL __ANEGW1
                 __MULW121:
000418 9508      	RET
                 
                 __DIVW21U:
000419 2400      	CLR  R0
00041a 2411      	CLR  R1
00041b e190      	LDI  R25,16
                 __DIVW21U1:
00041c 0faa      	LSL  R26
00041d 1fbb      	ROL  R27
00041e 1c00      	ROL  R0
00041f 1c11      	ROL  R1
000420 1a0e      	SUB  R0,R30
000421 0a1f      	SBC  R1,R31
000422 f418      	BRCC __DIVW21U2
000423 0e0e      	ADD  R0,R30
000424 1e1f      	ADC  R1,R31
000425 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000426 60a1      	SBR  R26,1
                 __DIVW21U3:
000427 959a      	DEC  R25
000428 f799      	BRNE __DIVW21U1
000429 01fd      	MOVW R30,R26
00042a 01d0      	MOVW R26,R0
00042b 9508      	RET
                 
                 __DIVW21:
00042c d012      	RCALL __CHKSIGNW
00042d dfeb      	RCALL __DIVW21U
00042e f40e      	BRTC __DIVW211
00042f dfd3      	RCALL __ANEGW1
                 __DIVW211:
000430 9508      	RET
                 
                 __MODW21:
000431 94e8      	CLT
000432 ffb7      	SBRS R27,7
000433 c004      	RJMP __MODW211
000434 95a0      	COM  R26
000435 95b0      	COM  R27
000436 9611      	ADIW R26,1
000437 9468      	SET
                 __MODW211:
000438 fdf7      	SBRC R31,7
000439 dfc9      	RCALL __ANEGW1
00043a dfde      	RCALL __DIVW21U
00043b 01fd      	MOVW R30,R26
00043c f40e      	BRTC __MODW212
00043d dfc5      	RCALL __ANEGW1
                 __MODW212:
00043e 9508      	RET
                 
                 __CHKSIGNW:
00043f 94e8      	CLT
000440 fff7      	SBRS R31,7
000441 c002      	RJMP __CHKSW1
000442 dfc0      	RCALL __ANEGW1
000443 9468      	SET
                 __CHKSW1:
000444 ffb7      	SBRS R27,7
000445 c006      	RJMP __CHKSW2
000446 95a0      	COM  R26
000447 95b0      	COM  R27
000448 9611      	ADIW R26,1
000449 f800      	BLD  R0,0
00044a 9403      	INC  R0
00044b fa00      	BST  R0,0
                 __CHKSW2:
00044c 9508      	RET
                 
                 __GETW1P:
00044d 91ed      	LD   R30,X+
00044e 91fc      	LD   R31,X
00044f 9711      	SBIW R26,1
000450 9508      	RET
                 
                 __GETW1PF:
000451 9005      	LPM  R0,Z+
000452 91f4      	LPM  R31,Z
000453 2de0      	MOV  R30,R0
000454 9508      	RET
                 
                 __PUTPARD1:
000455 937a      	ST   -Y,R23
000456 936a      	ST   -Y,R22
000457 93fa      	ST   -Y,R31
000458 93ea      	ST   -Y,R30
000459 9508      	RET
                 
                 __SAVELOCR6:
00045a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00045b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00045c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00045d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00045e 931a      	ST   -Y,R17
00045f 930a      	ST   -Y,R16
000460 9508      	RET
                 
                 __LOADLOCR6:
000461 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000462 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000463 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000464 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000465 8119      	LDD  R17,Y+1
000466 8108      	LD   R16,Y
000467 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :   6 r2 :   0 r3 :   0 r4 :   9 r5 :   4 r6 :   6 r7 :   2 
r8 :   6 r9 :   1 r10:   2 r11:   1 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   7 r26: 120 r27:  50 r28:  14 r29:   1 r30: 209 r31:  97 
x  :  24 y  : 164 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :  10 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  19 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  63 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   8 cpc   :   6 cpi   :  33 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  23 ld    :  26 ldd   :  76 ldi   : 151 
lds   :   1 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  23 movw  :  30 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  15 pop   :   1 push  :   1 rcall :  26 ret   :  49 
reti  :   0 rjmp  :  81 rol   :   4 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :  17 sbic  :  17 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  58 std   :  31 sts   :   3 sub   :   2 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008d0   2176     80   2256   32768   6.9%
[.dseg] 0x000060 0x00029a      0     58     58    2048   2.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
